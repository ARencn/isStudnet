为什么要模块化?


模块化的历程 AMD CMD commonJS
    import export



Es6模块化
    静态化,必须在顶部,不能使用条件语句,自动采用严格模式
    treeshaking和编译优化,以及webpack3中的作用域提升
    外部可以拿到实时值,而非缓存值(是引用而不是copy)
    可以对commonJS模块 重新赋值
    对ES6模块重新赋值会编译报错

    都可以对对象内部的值进行改变

    commonJS是对模块的拷贝
    ES6是对模块的引用


const&let
    代替var 减少数据污染

    块级作用域
    使用let和const不再有变量提升,不允许重复声明
    优先使用const const是不可修改的  let可以修改

    可以直接在参数列表中设置默认值
箭头函数

        var f = v=>v; 等同于 var f=function(v){return v}
        没有参数和多个参数就写括号  如: var f=()=>{}
        箭头函数 使用return必须带上大括号
        想要返回对象必须要加小括号 如 var f=()=>({a:1})
        语句为多行的时候必须要加{}


    箭头函数的this指向定义时所在的对象 不会随运行环境变化而变化
            不可以作为构造函数(不能使用new)
            没有arguments对象

