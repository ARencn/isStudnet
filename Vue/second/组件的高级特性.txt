const component ={
    template :
    `      
    <div :style="style">
        <div class= "header">
            <slot name="header"></slot>
        </div>
        <div class="section">
            <slot name="section"  value="456"></slot>  //在slot上自定义属性可在调用slot时加上slot-scope="slot name"  然后用{{slot name.value调用}}
        </div>
    </div>
    `,
    data(){
        return{
            style:{
                width: '200px',
                height:'200px',
                border : ' 1px solid #adadad'
            }
        }

    }
}

new Vue({
    components:{
        CompOne: component
    },
    el:"#root",
    data(){
        return{
            value:'123'
        }
    },
    mounted(){

        this.$ref.span.value可以调用数据等

        最好不要直接操作组件而是在组件内部就定义好  
    }


    ,
    template:`
        <div>
            <comp-one>
                <span ref="span" slot="header">this is header</sapn>
                <span slot="section">this is section</sapn>
            <comp-one>
        </div>

    `,
    provide(){
        const data={
            Object.defineProperty(data , 'value',{
                get:()=>this.value,
                enumerable:true
            })
            不推荐使用
        }
        return{
            yeye: this
            vlaue:this.value  这样直接把value return出去才会在渲染时把自己的数据也return出去  
            //因为他提供的vlaue 变化不会导致子组件的重新渲染 所以需要 提供一个get方法
        }
    }
})

因为实例只能拿到父级组件  假如需要越级拿到爷爷等组件 则需要 在需要越级拿到的组件中定义一个provide的属性  在其中把this 给提供出去  然后在需要调用的地方  设置 inject:['name','value'] 然后即可饮用